<?php
/**
 * This file is part of the TSantos Serializer package.
 *
 * (c) Tales Santos <tales.augusto.santos@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace TSantos\Serializer;

use Metadata\ClassMetadata;

/**
 * Class SerializerClassCodeGenerator
 *
 * @author Tales Santos <tales.augusto.santos@gmail.com>
 */
class SerializerClassCodeGenerator
{
    /**
     * @param ClassMetadata $classMetadata
     * @return string
     */
    public function generate(ClassMetadata $classMetadata): string
    {
        return $this->classDeclaration($classMetadata, $this->getClassName($classMetadata));
    }

    public function getClassName(ClassMetadata $classMetadata)
    {
        return str_replace('\\', '', $classMetadata->name) . 'Serializer';
    }

    private function classDeclaration(ClassMetadata $metadata, string $className): string
    {
        return <<<EOF
<?php

use TSantos\Serializer\AbstractSerializerClass;
use TSantos\Serializer\Exception\InvalidArgumentException;
use TSantos\Serializer\SerializationContext;

/**
 * THIS CLASS WAS GENERATED BY THE SERIALIZER. DO NOT EDIT THIS FILE.
 */
class $className extends AbstractSerializerClass
{
{$this->serializeMethod($metadata)}
}

EOF;
    }

    private function serializeMethod(ClassMetadata $metadata): string
    {
        return <<<EOF
    /**
     * @param \\{$metadata->name} \$object
     * @param SerializationContext \$context
     * @return array
     */
    public function serialize(\$object, SerializationContext \$context): array
    {
{$this->serializeMethodBody($metadata)}
    }
EOF;
    }

    private function serializeMethodBody(ClassMetadata $metadata): string
    {
        $code = <<<EOF
        if (!\$object instanceof \\{$metadata->name}) {
            throw new InvalidArgumentException(sprintf('%s can serialize instances of "%s" only. "%s" given', get_class(\$this), '{$metadata->name}', is_object(\$object) ? get_class(\$object) : gettype(\$object)));
        }

        \$data = [];
        \$shouldSerializeNull = \$context->shouldSerializeNull();

EOF;
        $code .=
            $this->properties($metadata) .
            $this->virtualProperties($metadata);

        $code .= <<<EOF
        
        return \$data;
EOF;

        return $code;
    }

    private function properties(ClassMetadata $metadata): string
    {
        $code = '';

        foreach ($metadata->propertyMetadata as $property) {
            $getter = "\$object->{$property->accessor}";
            $value = '$value';
            if (null !== $property->modifier) {
                $value .= '->' . $property->modifier;
            }

            $code .= <<<EOF
        #property '$property->name'
        if (\$this->isPropertyGroupExposed('{$property->name}', \$context)) {
            if (null !== \$value = $getter) {
                {$this->renderValue($property, $value)}
            } elseif (\$shouldSerializeNull) {
                \$data['$property->exposeAs'] = null;
            }
        }

EOF;
        }

        return $code;
    }

    private function virtualProperties(ClassMetadata $metadata): string
    {
        $code = '';

        foreach ($metadata->methodMetadata as $property) {
            $getter = "\$object->{$property->name}()";
            $value = '$value';
            if (null !== $property->modifier) {
                $value .= '->' . $property->modifier;
            }

            $code .= <<<EOF
        #virtual property '$property->name'
        if (\$this->isVirtualPropertyGroupExposed('{$property->name}', \$context)) {
            if (null !== \$value = $getter) {
                {$this->renderValue($property, $value)}
            } elseif (\$shouldSerializeNull) {
                \$data['$property->exposeAs'] = null;
            }
        }

EOF;

        }

        return $code;
    }

    private function renderValue($property, string $value)
    {
        if ($this->isScalarType($property->type)) {
            return <<<EOF
\$data['$property->exposeAs'] = {$this->castType($value, $property->type)};
EOF;
        } else {
            return <<<EOF
\$data['$property->exposeAs'] = \$this->serializer->normalize($value, \$context);
EOF;
        }
    }

    private function castType(string $value, string $type)
    {
        return sprintf('(%s) %s', $type, $value);
    }

    private function isScalarType(string $type)
    {
        return in_array($type, ['integer', 'string', 'float', 'boolean']);
    }
}
