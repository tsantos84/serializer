{% extends 'base.php.twig' %}

{% macro render_getter(prop) %}
        // property '{{ prop.name }}'
        $propReflection = static::getReflection({{ prop.reflection.declaringClass.shortName }}::class, '{{ prop.name }}');
        $public = $propReflection->isPublic();
        if (!$public) {
            $propReflection->setAccessible(true);
        }
        if (null !== $value = $propReflection->getValue($object)) {
            {% spaceless %}
            {% if prop.modifier is not null %}
                $data['{{ prop.exposeAs }}'] = {{ ('$value->' ~ prop.modifier)|raw }};
            {% elseif prop.type in ['integer', 'string', 'float', 'boolean', 'array'] %}
                $data['{{ prop.exposeAs }}'] = ({{ prop.type }}) $value;
            {% else %}
                $data['{{ prop.exposeAs }}'] = $this->serializer->normalize($value, $context);
            {% endif %}
            {% endspaceless %}

        } elseif ($shouldSerializeNull) {
            $data['{{ prop.exposeAs }}'] = null;
        }
        if (!$public) {
            $propReflection->setAccessible(false);
        }
{% endmacro %}

{% macro render_setter(prop) %}
        // property '{{ prop.name }}'
        if (isset($data['{{ prop.exposeAs }}'])) {
            $propReflection = self::getReflection({{ prop.reflection.declaringClass.shortName }}::class, '{{ prop.name }}');
            $public = $propReflection->isPublic();
            if (!$public) {
                $propReflection->setAccessible(true);
            }
            if (null !== $value = $data['{{ prop.exposeAs }}']) {
                {% spaceless %}
                {% if prop.type in ['integer', 'string', 'float', 'boolean', 'array'] %}
                    $propReflection->setValue($object, $value);
                {% else %}
                    $propReflection->setValue($object, $this->serializer->denormalize($value, '{{ prop.type|raw }}', $context));
                {% endif %}
                {% endspaceless %}

            } else {
                $object->{{ prop.setter }}(null);
            }
            if (!$public) {
                $propReflection->setAccessible(false);
            }
        }
{% endmacro %}

{% macro render_virtual_property_getter(prop) %}
        // property '{{ prop.name }}'
        if (null !== $value = $object->{{ prop.name }}()) {
            {% spaceless %}
            {% if prop.modifier is not null %}
                $data['{{ prop.exposeAs }}'] = {{ ('$value->' ~ prop.modifier)|raw }};
            {% elseif prop.type in ['integer', 'string', 'float', 'boolean'] %}
                $data['{{ prop.exposeAs }}'] = ({{ prop.type }}) $value;
            {% else %}
                $data['{{ prop.exposeAs }}'] = $this->serializer->normalize($value, $context);
            {% endif %}
            {% endspaceless %}

        } elseif ($shouldSerializeNull) {
            $data['{{ prop.exposeAs }}'] = null;
        }
{% endmacro %}

{% import _self as helper %}

{% block property_getters %}
{{ helper.render_getter(prop) }}
{% endblock %}

{% block virtual_property_getters %}
{{ helper.render_virtual_property_getter(prop) }}
{% endblock %}

{% block property_setters %}
{{ helper.render_setter(prop) }}
{% endblock %}

{% block additional_methods %}

    private function getReflection(string $class, string $property): \ReflectionProperty
    {
        static $reflections;

        if (null === $reflections) {
            $reflections = [
{% for class in hierarchy_classes %}
                '{{ class }}' => new \ReflectionClass('{{ class }}'),
{% endfor %}
            ];
        }

        return $reflections[$class]->getProperty($property);
    }
{% endblock %}
